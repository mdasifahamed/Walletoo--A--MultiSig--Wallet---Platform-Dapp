WalletFactory.sol
Purpose:
The WalletFactory contract serves as a factory for creating instances of another contract called Wallet.
Each Wallet instance represents a multisignature wallet where multiple users can submit and vote on transactions.
Key Features:
Wallet Creation:

The createWallet function allows an external account (EOA) to create a new multisignature wallet.
Criteria for wallet creation include being an EOA and having at least three members (including the wallet creator).
User Wallet Management:

The contract keeps track of wallet creators, wallet addresses, and the mapping of creators to wallets.
A creator can query the wallets they have created using the getWalletAddressOfUser function.
Wallet Lookup:

The getWalletAddressById function allows users to retrieve the wallet address based on its ID.
Internal Functions:

isWalletCreator: Checks if an address is a wallet creator.
NotEOA: Checks if an address is an external account (not a contract).
Wallet.sol
Purpose:
The Wallet contract represents a multisignature wallet where users can propose and vote on transactions.
Key Features:
User Management:

Users can be added or removed from the wallet using the submitUserAddOrRemoveRequest function.
The contract maintains a list of users, and each user has a corresponding fund balance.
Transaction Requests:

Users can submit transaction requests using the submitTransactionRequest function.
Requests can involve either Ether transfers or token transfers.
Voting System:

Users can vote on user add/remove requests (voteOnAddOrRemoveMember) and transaction requests (voteOnTrxReq).
If a request reaches the voting threshold, it gets executed.
Internal Functions:

addUser: Adds a user to the wallet.
removeUser: Removes a user from the wallet.
executeTrx: Executes an Ether transfer for a transaction request.
isToken: Checks if an address is a contract (token).
Fallback Function:

The contract includes a fallback function that allows users to send Ether to the wallet, updating their fund balance.
Note:
The contracts make use of various modifiers to ensure that only authorized actions can be performed.
Both contracts are designed to be interacted with primarily by external accounts (EOAs) and not other contracts.
In summary, the WalletFactory contract acts as a factory for creating multisignature wallets (Wallet contracts) with specified criteria, while the Wallet contract manages users, handles transaction requests, and implements a voting system for executing requests.

# To Try The Project Follow The Steps
1. At First Clone The Repositiory

```shell
git clone https://github.com/mdasifahamed/Walletoo--A--MultiSig--Wallet---Platform-Dapp.git
```